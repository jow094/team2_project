Spring  프레임워크의 주요 개념
 -EJB 보다 가벼운 경량 프레임워크
 -IoC (Inversion of Control) : 제어의 역행이라는 기술을 사용해서 객체간의 느슨한 결합을 사용할수 있다
   @ 제어의 역행 : 제어권이 나한테 있는것
   @ 느슨한 결합 : 
 -DI (Dependency Injection) : 의존성 주입
 -AOP (Aspect Oriented Programming) : 관점 지향 프로그래밍
 -영속성(Persistence)

 * Spring 제공 기능 :
   -core : 다른 기능들과 설정을 분리하기 위해서 IoC 제공
   -context : 객체(Bean)를 다양한 애플리케이션에서 접근 가능하도록 제공
   -DAO : JDBC 기능을 조금 더 편리하게 사용할 수 있도록 제공
   -ORM : 영속성 관련 프레임워크 연동기능 제공 (하이버네이트, 마이바티스)
   -AOP : 관점지향 프로그래밍 제공
   -web : 웹 개발에 필요한 정보(기능)제공
   -webMVC : 스프링 MVC 개발에 필요한 기능 제공

p122

	JSPMVC :
	
	요청 <-> Controller - Model(action) - DAO - DB
			   \
			  view
			  
			  
	SpringMVC :
	
			 HandlerMapping
				  //
	요청 <-> DispatcherServlet - HandlerAdapter - Controller
			||	  		\\
		  view(JSP)	  ViewResolver
		  
* 프로젝트의 구성
	- Presentation Layer : UI를 담당하는 요소, view 페이지에 해당함.
	- Business Layer(Service Layer) : 서비스 계층, 요구사항을 처리하는 계층, action 페이지에 해당함.
	- Data Access Layer (Persistence Layer) : 영속 계층, 데이터를 처리하는 계층
	
	요청 <-> controller - Service - DAO - DB
			  ||
			 view
			 
	<----------------> <------>  <-------->
	   Presentation    Business  Data Access

	
* Data Access Layer의 구성
	DAO - (MyBatis-Spring) - MyBatis(SqlSessionFactory) - DB
	
* Mybatis (iBatis) : SQL Mapper 라이브러리(프레임워크)
	- try-catch-finally 생략가능
	- pstmt 객체 생성 생략가능
	- rs 객체 생략가능
	 => 소스코드의 간결화
	
	- SQL 쿼리구문을 구분할수 있음(파일 분리를 통해)
	- spring과의 자동 연동으로 처리
	- 동적 SQL 구문 제공
	
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-test -->
		
	- 사용법 :
		1) XML 코드를 사용하여 SQL 쿼리 구문을 작성, DAO 에서 xml 코드 호출
		        장점 : 별도의 파일에서 sql 구문 관리, 유지보수에 유리
		        단점 : 코드 분량이 증가하여 작업 복잡도 상승
		        
		2) 어노테이션을 사용하여 SQL문 작성, DAO 인터페이스 형태
		        장점 : 코드 분량 감소, 생산성 증가
		        단점 : SQL 수정할때마다 매번 컴파일을 수행해야 함, 유지보수에 불리

		3) XML과 어노테이션을 같이 사용
		        장점 : 간단한 쿼리는 어노테이션, 복잡한 쿼리는 XML 파일로 작성
		        단점 : 일관성이 떨어진다. 개발자의 실력과 경험에 따른 차이가 발생하기 쉬움         
		        
	- Mybatis 개발 순서 :
		1) DB 생성
		2) 도메인 객체의 설계, 클래스 생성(=DTO생성) + lombok 라이브러리
			// 도메인 : 개발에 필요한 중요한 개념을 나타내는 명사
			// 		=> 물리적으로 분리가능한 객체의 단위 => 디비 테이블을 생성하는 단위
		3) DAO 인터페이스 생성, 실행에 필요한 동작을 추상메서드로 생성
		4) XML 파일을 사용하여 mapper 생성, SQL을 저장
		5) mapper 파일에 DTD를 추가
		6) mapper 파일의 위치(저장경로) 설정
		7) SQL 구문 작성
		8) mybatis 에서 해당 mapper 파일을 인식하도록 설정
		9) DAO 구현
		10) 스프링에서 실행(테스트)
		
	* Project lombok 설치
	
	https://projectlombok.org/download
	cmd 에서 알맞은 위치를 설정한 후 java -jar lombok.jar
	sts 파일 디렉션하여 설치
	
	
	* logger 객체의 로그 레벨
	
	TRACE -> DEBUG -> INFO -> WARN -> ERROR -> FATAL
	
	trace : debug 레벨보다 조금 더 상세한 정보를 출력
	debug : 개발시 디버깅 용도
	info : 서비스 운영 로그 정보 출력
	warn : 시스템 오류의 원인정보 출력
	error : 실행 중 문제가 발생한 상태정보 출력
	fatal : 시스템 차원의 문제가 발생했을때 출력
	
	 => log4j.xml에 설정한 레벨값 => 설정한 레벨 값보다 높은 레벨의 메세지만 출력
	 
	 
	*  의존 객체 자동 주입 (Automatic Dependency Injection)
	  => 스프링의 설정파일 / 태그형태로 의존객체 대상을 명시하지 않고, 스프링(컨테이너)이 자동으로 의존 대상을 찾아서 주입하는 것.
	  
	  @inject
	    => java에서 지원하는 어노테이션 (특정 프레임워크에 비종속적임)
	    => 찾는 순서 : 타입 -> @Qualifier -> 이름 -> 실패
	    => 빌드도구(Maven / pom.xml)에 라이브러리 의존성 추가가 필요
	    => 멤버변수, setter(), 생성자, 일반메서드 => 사용가능
	    
	  @Autowired
	    => Spring 에서 지원하는 어노테이션(스프링 프레임워크에 종속적임)
	    => 찾는 순서 : 타입 -> 이름 -> @Qualifier -> 실패
	    => 별도의 의존성 추가 필요없음
	    => 멤버변수, setter(), 생성자, 일반메서드 => 사용가능
	
	  @Resource
	    => Java에서 지원하는 어노테이션 (특정 프레임워크에 비종속적)
	    => 찾는 순서 : 이름 -> 타입 -> @Qualifier -> 실패
	    => 멤버변수, setter() => 사용가능
	    
	** @Qualifier : 스프링 객체를 구분하기 어려울 때 사용되는 이름(별명)
	
		예를 들어 다음과 같이 사용
		
		<bean id="dataSource" 
	      class="com.zaxxer.hikari.HikariDataSource" 
	      destroy-method="close"  >
	      
	      <qualifier value = "이름(h1)" >
	      
	      <constructor-arg ref="hikariConfig" />
	
		</bean>
		
		@Autowired @Qualifier("h1")
		private DataSource ds;
		
		* 생성자 주입(Constructor Injection) : 단일 생성자인 경우, @Autowired를 생략할 수 있다.
		
		class Test{
			private DataSource ds;
			
			// @Autowired 생략가능	
			public Test( DataSource ds){
				this.ds = ds;	
			}
		}
		
		*필드 주입(Field injection)
		
		class Text{
			
			@Autowired
			private DataSource ds;
		
		}
		
		* 수정자 주입 (Setter Injection)
		class Test{
		
			private DataSource ds;
			
			@Autowired
			public void setDataSource(DataSource ds){
				this.ds = ds;
			}
		
		}
		